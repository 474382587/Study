3. 解决的问题
    1. 浮动元素的父元素高度
        .clear::after{
            content:"";
            display:block;
            clear:both;
        }
        <div class="clear"></div>
    2. 外边距溢出
        <div id="d1"></div>
        <div id = "d2"></div>
        #d2::before{
            content:"";
            display:table;
        }
4. 计数器
    1. 什么是计数器
        使用CSS 动态生成一组 有序的数字并且插入到元素中
    2. 语法
        1. 属性 - counter-reset
            1. 作用
                声明或重置计数器
            2. 语法
                counter-reset：名 初始值； 两部分
                counter-reset：名1 值1 名2 值2；
                注意：
                    1. 初始值可以省略 默认为0
                    2. 不能放在使用的元素中声明，大部分情况下，可以将计数器声明在使用元素的父元素上
        2. 属性 - counter-increment
            1. 作用
                指定计数器每次出现的增量
                即每次出现的计数器值得变化范围
            2. 语法
                 counter-increment：名 增量
                 counter-increment：名1 增量1 名2 增量2
            注意：
                1， 增量值可以为正也可以为负，也可以省略
                    正：递增
                    负：递减
                    省略：默认增量为1
                2. 哪个元素使用计数器，在哪个元素中设置计数器增量
        3. 函数 - counter
            1. 作用
                在指定元素中，使用计数器的值
                必须要配合 content 属性 一起使用
                content 要配合着 ::before 或 ::after 一起使用
            2. 语法
                xx::before{
                    content:counter(名);
                }
                ex:
                    1. Web 基础知识
                    2. html 快速入门
                    3. 网页中的文本
	3. 多列
		1. 语法
            1. 分隔列
                属性：column-count
                取值：数字
            2. 列间隔
                属性：col-gap
                取值： px为单位的数值
            3. 列规则
                作用：定义每两列之间的线条样式
                属性：column-rule
                取值：width style color    
		2. 兼容性
            Chrome:
                -webkit- prefix
            Firefox:
				-moz- prefix
4. CSS Hack(浏览器兼容性)
	1. 原理
        使用CSS属性优先级解决兼容性问题
    2. CSS Hack 的实现方式
        1. CSS 类内部 Hack
            在样式属性名或值的前后增加前后缀以便识别不同的浏览器
            *color：red；
            -color：red；
        2. 选择器 Hack 
            在选择器前增加前缀以便识别不同的浏览器
            *div{} IE6
            *+div{} IE7 
        3. HTML头部引用 Hack
            使用HTML条件注释判断浏览器版本
            1. 什么是头部引用Hack？
                使用 IE 条件注释 来解决兼容性的问题
            2. 语法
                <!--[if "condition" IE "version"]>
                    operations
                <![endif]-->

                1. 版本
                    取值： 
                        1. 6~10 之间的任意数字
                        2. 省略版本，判断是否为IE浏览器
                            <!-- [if IE 6]>
                                只在 IE 6 中使用
                            <![endif]-->
                2. 条件
                    1. gt ： greater than
                        只在 大于 指定版本 的浏览器中解析内容
                        <!--[if gt IE 6]>
                            <h1>This text will only be displayed in higher than IE6 version of IE</h1>
                        <![endif]-->
                    2. lt: less than
                        只在 小于 指定版本 的浏览器中解析内容
                        <!--[if lt IE 6]>
                            <h1>This text will only be displayed in lower than IE6 version of IE</h1>
                        <![endif]-->
                    3. gte ： greater than
                        只在 大于等于 指定版本 的浏览器中解析内容
                        <!--[if gt IE 6]>
                            <h1>This text will only be displayed in higher than or equal to IE6 version of IE</h1>
                        <![endif]-->
                    4. lte ： greater than
                        只在 小于等于 指定版本 的浏览器中解析内容
                        <!--[if gt IE 6]>
                            <h1>This text will only be displayed in lower than or equal to IE6 version of IE</h1>
                        <![endif]-->
                    5. ! : not equal to
                        只在  条件版本以外 的所有版本浏览器中解析内容
                        <!--[if !IE 6]>
                            Exclude IE6
                        <![endif]-->
                    6. 省略
                        判断是否为 IE 或 是否为指定版本


#############################################################################################################

1. 转换
    1. 转换简介
        1.什么是转换
            转换是改变元素在页面中的大小，位置形状，角度的一种方式
            转换分为 2D转换 和 3D转换
            2D转换：使元素在x轴和y轴进行的转换操作
        2. 转换属性
            属性： transform
            取值：
                1. none
                2. transform-functions
                    一组转换函数，表示一个或多个转换函数，多个的话， 用空格隔开   
        3. 转换的原点
            属性：transform-origin
            默认：原点在元素的中心处
            取值：
                两个值：值1 x 值2 y
                三个值：值1 x 值2 y 值3 z
    2. 2D转换
        1. 2D位移
            1. 作用：改变元素在x轴和y轴上的位置
            2. 语法
                属性：transform
                函数：
                    translate（x）
                        改变元素在x轴上的位置
                        取值为正 右移
                        取值为负的时候 左移
                    translate(x,y)
                        改变元素在x轴和y轴上的距离
                        取值为负的时候 上移
                        取值为正的时候 下移
                    translateX(x)
                        改变元素在x轴上的位置
                    translateY(y)
                        改变元素在y轴上的位置
        2. 2D缩放
            1. 什么是缩放
                改变元素在x轴或y轴上的大小
            2. 语法
                属性：transform
                函数：
                    scale(value)
                        xy轴都是等比缩放
                        值是缩放倍数

                        取值： 
                            默认值 1 原始大小
                            缩小： 0~1之间的小数
                            放大： 大于1的值
                            负值： 改变方向，以旋转190度效果显示
                    scale(x,y)
                        分别改变元素在x轴和y轴上的大小
                    scaleX(x)
                        x轴缩放
                    scaleY(y)
                        y轴缩放
        3. 2D旋转
            1. 语法
                属性：transform
                函数：rotate(ndeg)
                    n为旋转角度  
                    取值为正 顺时针旋转
                    取值为负 逆时针旋转
            2. 注意 
                1. 转换的原点   
                    旋转围绕着转换原点来做的，所以原点位置不同，转换效果也不同 
                2. 旋转时连同坐标轴也一同跟着旋转
        4. 2D倾斜
            1. 什么是倾斜
                改变元素在页面中的形状
                医院点为中心，围绕着x轴和y轴产生的倾斜角度
            2. 语法
                1. 属性： transform
                2. 函数： 
                    skew(x)
                        向横向产生倾斜效果，实际改变的是y轴的倾斜角度
                        值为正，y轴按逆时针角度倾斜
                        值为负，y轴按顺时针角度倾斜
                    skew(x,y)
                        x 横向倾斜
                            值为负，x轴按逆时针角度倾斜
                            值为正，x轴按顺时针角度倾斜
                    skewX(x)
                    skewY(y)
    3. 3D转换
        1. perspective 属性
            模拟 人眼 到 3D变换物体 之间的距离
            该属性要添加在 3D转换元素 的父元素上

            浏览器兼容性：
                Chrome 和 Safari：
                    -webkit-perspective：数值
        2. 3D转换 - 旋转
            属性：transform
            取值：
                1. rotateX(ndeg)
                2. rotateY(ndeg)
                3. rotateZ(ndeg)
                    取值为正 顺时针旋转
                    取值为负 逆时针旋转
                4. rotate3D(x,y,z,ndeg)
                    xyz
                    取值为0的时候表示该轴不参与旋转
                    取值为1的时候表示该轴参与到旋转操作当中
        3. 3D 转换 - 位移
            1. 什么是3D位移
                改变元素在 x,y,z 上的位置
            2. 语法
                1. tranform-style
                    如何处理子元素的摆放位置
                    取值：
                    1. flat
                        默认值，不保留子元素的3D位置
                    2. preserve-3d
                        保留子元素的3D位置 
                2. transform 属性
                    取值
                        translateZ(z);
                        translate3d(x,y,z); 

        

2. 过渡
    1. 什么是过渡
        使得CSS属性值，在一段时间内，平缓变化的一个效果
    2. 过渡效果四要素
        1. 指定过渡属性
            指定哪个属性值在变化时需要使用过渡效果
        2. 指定过渡时间
            多长时间内完成过渡效果
        3. 指定过渡时间的速率
            过渡过程中的变化速率（匀速，先快后慢）
        4. 指定过渡延迟时间
            当用户激发操作后，等待多长时间才激发效果
    3. 过渡属性
        1. 指定过渡属性
            属性：transition-property
            取值：none | all | property-name
                property-name指的是要使用过渡效果的属性名称
            ex：
                transition-property: background;
                transition-property: border-radius;
            可以使用过渡效果的属性
                1. 颜色属性
                    color,background-color,border-color
                2. 取值为数值的属性
                    尺寸，background-size,margin,padding
                3. 转换属性
                    transform
                4. 渐变属性
                    background: linear-gradient()
                5. 阴影属性
                6. visibility
        2. 指定过渡时长
            属性：transition-duration
            取值：s/ms 单位数值
            注意：默认值为0s 即没有过渡效果
        3. 制定过渡时间速率
            属性：transition-timing-function
            取值：
                1. ease
                    默认值，先慢后快再慢
                2. linear
                    匀速
                3. ease-in
                    慢速开始快速结束
                4. ease-out
                    快速开始慢速结束
                5. ease-in-out
                    慢速开始慢速结束 中间先快后慢
        4. 过渡延迟
            属性：transition-delay
            取值：s/ms 为单位的时间
        5. 过渡属性简写方式
            transition: property-name duration timing-function delay;       
3. 动画
    1. 什么是动画
        使元素从一种样式逐渐变化为另一种样式的过程
        CSS中实现动画，会存在兼容性问题，与动画相关的操作尽量加上浏览器前缀
    2. 使用动画的步骤
        1. 声明动画
            指定动画名称以及创建动画中的每个状态（关键帧）
        2. 为元素调用动画
            指定 调用的动画名称，时长，播放次数
        3. 声明动画
            指定动画名称以及各个关键帧
            关键帧：当前元素状态的 时间点 及 样式
            语法：
                在样式表中声明
                @keyframes <动画名称>{
                    0% 和 100% 可以写成
                    from  to
                    但是有些浏览器是不支持的 尽量用百分数


                    0%{
                        动画开始时的 样式
                    }
                    ... ... 
                    50%{
                        动画执行到一半的时候的 样式
                    }
                    100%{
                        动画结束时的 样式
                    }
                }
        4. 调用动画
            1. animation-name
                作用：指定调用动画名称
            2. animation-duration
                作用：指定动画完成一个周期所用时间 s/ms
            3. animation-timing-function
                作用：指定动画的执行速率
                取值：ease，linear，ease-in，ease-out，ease-in-out
            4. animation-delay
                作用：指定动画的延迟 s/ms 
            5. animation-count 
                作用：指定动画播放次数
                取值： 
                    1. 具体数值
                    2. infinite：无限次数
            6. animation-direction 
                作用：指定动画播放方向
                默认：由0%播放到100%
                取值： 
                    1. normal
                        默认播放
                    2. reverse
                        逆向播放
                    3. alternate
                        轮流播放
                            - 奇数播放：0% ~ 100%
                            - 偶数播放：100% ~ 0%
            7. 简写
                属性：animation
                取值：name duration timing-function delay iteration-count direction；
            8. animation-fill-mode 
                作用：规定动画播放前后的填充效果
                取值： 
                    1. none：默认，即无填充效果
                    2. forwards：动画播放完成后，会保持在最后一个帧的状态上
                    3. backwards：动画在播放前，应用在第一个帧的状态上（只有在延迟(delay)的时间内 才会显示在第一个帧的状态上）
                    4. both：动画播放前后分别使用对应填充状态
            9. animation-play-state 
                作用：规定动画是播放还是暂停
                取值： 
                    1. paused
                        暂停
                    2. running
                        播放
4. CSS 优化