1. CSS 概述
    1. 问题
        1. 设置页面中所有的文本颜色为红色
        2. 设置页面中所有的p元素文本为蓝色
        3. 设置页面中所有的h3元素文本也为蓝色
        4. 将页面中所有的p元素文本颜色改为绿色

        HTML 的不足：
            1. 不同标记想完成相同的效果使用的是不同的属性
                <body text ="red">  修改文本颜色
                <font color="blue">  修改文本颜色

            CSS 作用：
                1. 以统一的方式实现样式的定义
                    color:red;
                2. 提高页面样式的可重用性和可维护性

    2. 什么是CSS？
        CSS(Cascading Style Sheets)
        层叠样式表，级联样式表，简称 样式表
        实现了内容（HTML）与表现（CSS）的分离
    
    3. CSS 与 HTML 之间的关系
        HTML：构建网页结构
        CSS：构建HTML元素样式
    
    4. HTML属性与CSS样式的使用原则
        ex：
            html：<body text="red"> 修改文本颜色
            css：color:red; 修改文本颜色
        W3C：建议尽量使用CSS样式取代HTML属性
            <td colspan ="3">: colspan 属性在css中没有方式能取代，所以针对跨行跨列来讲，只能使用HTML 元素属性，不能使用css属性

2. CSS 语法
    1. 使用CSS样式表
        1. CSS样式表的使用方式
            1. 内联方式
            2. 内部样式表
            3. 外部样式表 

            1. 内联方式
                将样式声明在元素的 style 属性中
                语法
                    <any style="样式声明；样式声明"></any>
                    样式声明：表示一个具体显示效果，多个样式声明之间，用 “ ；” 隔开
                    每个样式声明都由两部分组成：
                        “样式属性：属性值”
                    ex：
                        样式属性    属性值
                        color       颜色英文表示法
                        font-size   以px或pt为单位的数值
                        background-color    颜色以英文表示法

                        设置某元素的 文本颜色 为红色，文字大小为 24px，背景颜色为 绿色
                        <p style ="color:red; font-size:24px; background-color:green;"></p>

                    练习：设置页面上某一 div 元素，文本颜色为紫色（purple），文字大小为 18pt，背景颜色为 银灰色（silver）
                    <div style ="color:purple; font-size:18pt; background-color:silver;" ></div>
            2. 内部样式表
                将 样式声明 定义在 页面的 style 元素中
                1. 在 <head> 中添加 <style></style> 元素
                2. 在 <style></style> 中 添加任意多 “样式规则”
                    样式规则：
                        选择器{
                            样式声明；/*属性：值;*/
                            样式声明；
                            样式声明；
                            … …
                        }

                        选择器（selector）：规范了页面中哪些元素能够使用定义好的样式
                        ex:
                            p{
                                color:red;
                                font-size: 48px;
                                background-color:green;
                            }
                        p{} ： 定义页面中所有p元素的样式

                        ex:
                            设置页面上所有的div
                            文本颜色：black，背景颜色：黄色，文字大小：18pt
                            div{
                                color:black;
                                background-color:red;
                                font-size:18pt;
                            }
            3. 外部样式表
                步骤：
                    1. 先创建一个单独的样式表文件来保存样式规则
                    规则：
                        **.css
                        只能编写遵循css规范的内容
                    2. 在需要的页面上引入样式表文件
                        <head>
                            <link rel="stylesheet" href="" type = "text/css">
                        </head>
                        
                        * href：css文件url
                        * rel: 是relationship
                        * type = "text/css" 是默认值，可以不写

        2. CSS样式表特征
            1. 继承性
                子级元素可以直接使用父级元素声明好的样式
                大部分的css样式属性是可以被继承的
            2. 层叠性
                可以为一个元素声明多个样式规则
                如果样式不冲突的话，多个样式规则中的样式声明可以层叠为一个
            3. 优先级
                样式定义冲突时，按照不同样式使用的 优先级 来应用样式
                低：浏览器缺省设置（User Agent Stylesheet）
                中：外部样式表或内部样式表
                    - 就近原则：谁离元素近，就用谁（后定义的优先）
                高：内联样式
            4. !important 规则
                作用：显示调整样式的优先级，不管优先级，以important为准
                语法：
                    属性名称：值 !important;
                尽量少用
                    1. IE6以及一下浏览器不支持
                    2. 打破默认优先级规则
    2. CSS基础选择器
        1. 作用
            规范了页面中哪些元素能够使用定义好的样式
            目的：匹配页面元素
        2. 详解
            1. 通用选择器（*）
                作用：匹配页面中所有的元素
                语法：
                    *{
                        样式声明;
                    }
                缺点：效率较低，尽可能少用
            2. 元素选择器
                作用：定义页面某一标签的默认样式
                语法：
                    元素{
                        样式声明;
                    }
                ex:
                    /*页面上所有的div文字大小为12px*/
                    div{
                        font-size:12px;
                    }
                    /*页面上所有的span元素颜色为红色*/
                    span{
                        color:red;
                    }
            3. 类选择器
                作用：由css定义好，可以被任意标记的class属性值进行引用的选择器
                语法：
                    .类名{
                        样式声明;
                    }
                    类名：
                        1. 不能以数字开始
                        2. 除_ , - 以外不能有其他特殊符号
                    引用：
                        <any class = "类名"></any>
                引用方式 - 多类选择器的引用
                    可以将多个类选择器，同时应用在一个元素中
                    语法：<any class = "class1 class2 class3"> 
                定义方式 - 分类选择器的定义
                    将元素选择器和类选择器结合起来使用，从而实现对某种元素不同样式的细分控制
                    语法：元素选择器.类选择器{样式声明;}
                    ex:
                        1. div.important{}
                            定义 class 为 important 的 div元素 的样式
            4. ID选择器
                作用：针对 指定ID值的元素去定义样式
                语法：
                    #id值{样式声明;}
                    id值，一定要对应页面某个元素的id值
            5. 群组选择器
                作用：选择器声明是以，隔开的选择器列表
                语法：
                    选择器1，选择器2，选择器3，选择器4 ...
                ex:
                    span, .important, #main, div.redColor{
                        color:red;
                        font-size:12px;
                    }
                    页面中所有的span，class为important，id为main，class为redColor的div元素，字体颜色红色，字体大小12px
            6. 后代选择器
                后代：只要具备层级关系的元素，被嵌套的都可以称之为 后代元素
                语法：
                    选择器1 选择器2{样式声明;} 
                    选择器之间用空格隔开，空格表示的就是后代关系
                    ex:
                        1. #d1 span{}
                        作用： 匹配的是id为d1中的所有的span
            7. 子代选择器    
                子代：只具备一级层级关系的元素，被嵌套的称之为 子代元素
                语法：
                    选择器1>选择器2{}
                ex:
                    1. #d1>span{}
                        作用：匹配id为d1中的下一级span元素
            8. 伪类选择器
                作用：匹配页面元素的不同状态的选择器
                分类：
                    1. 链接伪类
                        1. :link，匹配 尚未被访问 的超链接状态
                        2. :visited，匹配 访问过后 的超链接的状态
                        
                        推荐使用方式：
                        元素：伪类{}
                    ex:
                        匹配id为anchor的元素未被访问时的样式
                        #anchor:link{}
                        匹配页面中id为myAn元素访问过后的状态
                        #myAn:visited{}
                    2. 动态伪类
                        1. :hover，匹配 鼠标悬停在元素上 的状态
                        2. :active，匹配 元素被激活时 的状态
                        3. :focus，匹配 元素获取焦点时 的状态（text,password,textarea）
                    3. 目标伪类
                    4. 元素状态伪类
                    5. 结构伪类
                    6. 否定伪类

                    练习：
                        比较 :foucus 与 :active 之间的区别
                        页面上添加一个文本框
                        设置文本框默认样式，字体为斜体（font-style:italic;）
                        文本框被激活时，字体改为正常（font-style:normal;）
                        文本框获取焦点时，文字变为红色3

        选择器权值：
            元素选择器   0001
            类选择器    0010
            伪类选择器   0010    
            ID选择器   0100    
            内联样式    1000
        选择器的权值加到一起，大的优先，如果权值相同，后定义的优先
3. 尺寸与边框
    * 单位
        1. 尺寸单位
            - % ：百分比
            - in ：英寸
            - cm ： 厘米
            - mm ：毫米
            - pt ：磅（1pt等于1/72英寸）
            - px ：像素（计算机屏幕上的一个点）
            - em ：1em等于当前的字体尺寸，2em等于当前字体尺寸的两倍
        2. 颜色单位
            - rgb(x,x,x) ：RGB值，如rgb(255,0,0)
            - rgb(x%,x%,x%) ：RGB百分比值，如rgb(100%,0%,0%)
            - #rrggbb ：十六进制数，如#ff0000
            - #rgb ：简写的十六进制数，如#F00
            - 表示英文的单词，如 red
    1. 尺寸属性
        1. 作用
            用于设置元素的宽度和高度
            单位为 百分比 或 像素
        2. 宽度属性
            width：设置元素的宽度
            min-width：设置元素的最小宽度
            max-width：设置元素的最大宽度
        3. 高度属性
            height：设置元素的高度
            min-height：设置元素的最小高度
            ma-height：设置元素的最大高度
        4. 允许被修改宽度和高度的元素
            1. 块级元素允许被允许被修改宽度和高度
            2. 大部分的行内块元素允许被修改尺寸
                行内块：表单控件元素
                单选按钮，复选框，无法修改尺寸
            3. 存在 width 和 height 属性的 html 元素允许被修改尺寸
                比如：img，table（表现形式不是block也不是inline）
        5. 溢出
            使用尺寸属性限制元素大小时，如果内容所需要的空间大小大于元素本身，则会导致溢出的效果
            溢出之后的处理：
                属性：
                    overflow
                    overflow-x
                    overflow-y
                取值：
                    1. visible  
                        默认值，溢出可见
                    2. hidden
                        隐藏，溢出隐藏
                    3. scroll
                        滚动，元素会出现滚动条，当内容溢出时，滚动条可用
                    4. auto
                        自动，内容溢出时显示滚动条并且可用，不溢出没有滚动条