{"version":3,"sources":["components/Login/Login.js","components/TodoList/TodoList.js","router.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","_useState","useState","_useState2","Object","slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","react_default","a","createElement","onChange","event","target","value","console","log","placeholder","type","onClick","alert","axios","post","then","res","dir","data","results","userId","window","sessionStorage","setItem","history","push","handleLogin","TodoList","todoItems","setTodoItems","todoItem","setTodoItem","getAllTodoItems","get","todo","JSON","parse","replace","useEffect","getItem","map","item","index","key","className","todoItemsCopy","e","splice","stringify","array","todoString","handleSubmit","Users","AppRouter","react_router_dom","basename","react_router","path","exact","component","Login","App","router","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65897006.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport axios from 'axios'\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link,\n    Redirect,\n    withRouter\n} from \"react-router-dom\";\n\nfunction checkSessionId() {\n\n    const sessionId = window.sessionStorage.getItem('todo_user_id') ? window.sessionStorage.getItem('todo_user_id') : ''\n    if (!!sessionId) {\n        return sessionId\n    }\n    else {\n        return ''\n    }\n\n}\nfunction handleLogin(username, password, props) {\n\n    axios.post('http://node.webdevjoe.com/login', {\n        username,\n        password\n    }).then(res => {\n        console.dir(res)\n        if(res.data && res.data.results && res.data.results.userId) {\n            console.log('Login successful')\n            window.sessionStorage.setItem('userId', res.data.results.userId)\n            props.history.push('/about/');\n        }\n    })\n}\n\nfunction Login(props) {\n\n    // const [pageTitle, setPageTitle] = useState(checkSessionId())\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n\n\n    return (<div>\n\n        <p>\n            <label>Username<input onChange={(event) => { setUsername(event.target.value); console.log(event.target.value) }} placeholder=\"xxx\"></input></label>\n        </p>\n        <p>\n            <label>Password<input type=\"password\" onChange={(event) => { setPassword(event.target.value); console.log(event.target.value) }} placeholder=\"*****\"></input></label>\n        </p>\n\n        <button onClick={() => {\n            if (username === '' || password === '') {\n                alert('username and password cannot be null!')\n            } else {\n                handleLogin(username, password, props)\n            }\n\n        }}>Login</button>\n\n    </div>)\n\n}\n\nexport default withRouter(Login)\n","import React from 'react'\nimport { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link,\n    Redirect,\n    withRouter\n} from \"react-router-dom\";\n\n// css\nimport './TodoList.css'\n\n\n// function testPost() {\n// axios.post('http://node.webdevjoe.com//todos', { todo: JSON.stringify(['123', '123123123', '3123123123']), username: 'joseph' }).then(res => {\n//     console.log('all todos ');\n//     console.dir(res)\n//     // return res.data.results.todo ? JSON.stringify(res.data.results.todo) : ['test1234']\n// })\n// }\n\n\n\nfunction TodoList() {\n    const [todoItems, setTodoItems] = useState(['test1'])\n    const [todoItem, setTodoItem] = useState('')\n    // function handleInputChange(event) {\n\n    // }\n\n\n    function handleDelete(todo) {\n        axios.post('http://node.webdevjoe.com/todos', { todo: JSON.stringify(todo).replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\"), username: 'joseph' }).then(res => {\n            console.log('delete ------------------------ ');\n            console.dir(res)\n            // return res.data.results.todo ? JSON.stringify(res.data.results.todo) : ['test1234']\n            // submitCallback()\n            const username = window.sessionStorage.getItem('userId') || ''\n            getAllTodoItems(username).then(res => {\n                console.log('second get all ')\n                setTodoItems(res)\n            })\n        })\n    }\n\n    function handleSubmit() {\n        console.log(todoItem)\n        if (!!todoItem) {\n            let array = todoItems.map(e => e)\n            console.log('++++++++++++', todoItem.replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\"))\n            array.push(todoItem)\n            const todoString = JSON.stringify(array).replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\")\n            console.dir(todoString)\n            axios.post('http://node.webdevjoe.com/todos', { todo: todoString, username: 'joseph' }).then(res => {\n                console.log('all todos ');\n                console.dir(res)\n                // return res.data.results.todo ? JSON.stringify(res.data.results.todo) : ['test1234']\n                // submitCallback()\n                const username = window.sessionStorage.getItem('userId') || ''\n                getAllTodoItems(username).then(res => {\n                    console.log('second get all ')\n                    setTodoItems(res)\n                })\n            })\n        } else {\n            alert('cannot be empty!')\n        }\n\n        // setTimeout(() => {\n        //    setTodoItems([1,2,3]) \n        // }, 1000);\n    }\n\n    function submitCallback() {\n\n    }\n    function getAllTodoItems(username) {\n\n        return axios.get('http://node.webdevjoe.com/todos?userId=' + username).then(res => {\n            console.log('getting all todos from server');\n            console.dir(res)\n            return res.data.results.todo ? JSON.parse(res.data.results.todo.replace(/&apos;/g, \"'\").replace(/&quot;/g, '\"')) : ['test1234']\n        })\n\n\n    }\n\n\n\n    console.log('initialized!')\n\n\n    useEffect(() => {\n        const username = window.sessionStorage.getItem('userId') || ''\n        getAllTodoItems(username).then(res => {\n            setTodoItems(res)\n        })\n    }, [])\n    useEffect(() => {\n        console.log('changed!')\n        console.log(todoItems)\n    }, [todoItems])\n\n\n\n\n    return (<div>\n        {\n            todoItems.map((item, index) => {\n                return <p key={index} className=\"todo\">{index + 1}. {item} <button onClick={() => {\n                    let todoItemsCopy = todoItems.map(e => e)\n                    todoItemsCopy.splice(index, 1)\n                    setTodoItems(todoItemsCopy)\n                    handleDelete(todoItemsCopy);\n                }}>Delete</button></p>\n            })\n        }\n        <input onChange={(event) => { setTodoItem(event.target.value) }} placeholder=\"Enter your todo item here: \"></input>\n        <button onClick={(event) => {\n            handleSubmit(event, todoItems);\n        }}>Submit</button>\n    </div>)\n}\n\n\nexport default TodoList\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Login from './components/Login/Login'\nimport TodoList from './components/TodoList/TodoList'\n\nfunction Index() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nfunction AppRouter() {\n  return (\n    <Router basename=\"/Study/todo/build\">\n      <div>\n        {/* <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Login</Link>\n            </li>\n            <li>\n              <Link to=\"/about/\">TodoList</Link>\n            </li>\n            <li>\n              <Link to=\"/users/\">Users</Link>\n            </li>\n          </ul>\n        </nav> */}\n\n        <Route path=\"/\" exact component={Login} />\n        <Route path=\"/about/\" component={TodoList} />\n        <Route path=\"/users/\" component={Users} />\n      </div>\n    </Router>\n  );\n}\n\nexport default AppRouter;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport AppRouter from './router.js'\n\nfunction App() {\n  return (\n    <AppRouter />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}